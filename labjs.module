<?php

/**
 * @file
 *   LABjs module
 */

define('LABJS_EXCLUDE', '// LABjs exclusion');
define('LABJS_QUEUE', '$LAB._q=[];$LAB.queue=function(){Array.prototype.push.apply($LAB._q,arguments);return this};$LAB.executeQueue=function(){var a=$LAB;for(var i=0,l=$LAB._q.length;i<l;i++){if(typeof $LAB._q[0]=="string"){a=a.script($LAB._q[0])}else if($LAB._q[0]===false){a=a.wait()}else{a=a.wait($LAB._q[0])}$LAB._q.shift()}$LAB._q=[]};');

/**
 * Implementation of hook_menu().
 */
function labjs_menu() {
  $items = array();

  $items['admin/settings/performance/labjs'] = array(
    'title' => 'LABjs',
    'description' => 'Configure the settings used to wrap JS blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('labjs_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Form for configuring the module.
 */
function labjs_admin_settings_form() {
  $form = array();

  $form['basic'] = array(
    '#type' => 'fieldset',
    '#title' => t('Basic settings'),
  );
  $form['basic']['labjs_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable LABjs loader'),
    '#default_value' => variable_get('labjs_enabled', TRUE),
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
  );
  $form['advanced']['labjs_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rewrite JavaScript blocks in page content'),
    '#default_value' => variable_get('labjs_content', FALSE),
  );
  $form['advanced']['labjs_closure'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rewrite JavaScript blocks in page closure'),
    '#default_value' => variable_get('labjs_closure', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_theme_registry_alter().
 *
 * Make LABjs's page preprocess function run *after* everything else's,
 * so that a theme can't call drupal_get_js() and mess everything up,
 * and other JS/CSS replacement modules can work with LABjs.
 */
function labjs_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page'])) {
    if (count($theme_registry['page']['preprocess functions']) > 0) {
      // If labjs's preprocess function is there already, remove it.
      if ($key = array_search('labjs_preprocess_page', $theme_registry['page']['preprocess functions'])) {
        unset($theme_registry['page']['preprocess functions'][$key]);
      }
    }
    // Now tack it on at the end so it runs after everything else.
    $theme_registry['page']['preprocess functions'][] = 'labjs_preprocess_page';
  }
}

/**
 * Implements hook_advagg_js_pre_alter.
 */
function labjs_advagg_js_pre_alter(&$javascript) {
  global $conf;
  if (   defined('MAINTENANCE_MODE')
      || !variable_get('labjs_enabled', TRUE)
      || empty($javascript)
      ) {
    return;
  }

  _labjs_patch_core($javascript);

  $conf['advagg_js_render_function'] = 'labjs_advagg_js_builder';
}

/**
 * Implements hook_preprocess_page().
 */
function labjs_preprocess_page(&$variables) {
  if (   defined('MAINTENANCE_MODE')
      || !variable_get('labjs_enabled', TRUE)
      || empty($variables['scripts'])
      ) {
    return;
  }

  // If advagg is enabled, this happens in hook_advagg_js_pre_alter().
  if (!module_exists('advagg') || !variable_get('advagg_enabled', ADVAGG_ENABLED) || (isset($_GET['advagg']) && $_GET['advagg'] == -1)) {
    // Get an array of all the JavaScript files loaded by Drupal on this page.
    $scripts = drupal_add_js();
    _labjs_patch_core($scripts);
    
    $variables['scripts'] = drupal_get_js('header', $scripts);
  }

  $javascript = '';
  $out = '';
  // If advagg is enabled, this happens in labjs_advagg_js_builder().
  if (!module_exists('advagg') || !variable_get('advagg_enabled', ADVAGG_ENABLED) || (isset($_GET['advagg']) && $_GET['advagg'] == -1)) {
    $labjs_path = (module_exists('libraries') ? libraries_get_path('labjs') : 'sites/all/libraries/labjs') . '/LAB.min.js';

    // Now everything is ok, wrap JS with LABjs.
    $javascript = labjs_rewrite_js($variables['scripts']);
    $out = '<script type="text/javascript" src="' . labjs_build_uri($labjs_path) . '"></script>';
    $variables['scripts'] = '';
  }

  // Replace any inline scripts.
  if (variable_get('labjs_content', FALSE)) {
    labjs_rewrite_js($variables['content']);
  }
  if (variable_get('labjs_closure', FALSE)) {
    labjs_rewrite_js($variables['closure']);
  }

  // Modify scripts in the header.
  $scripts = _labjs_rewrite_js();
  if (!empty($scripts)) {
    $out .= '<script type="text/javascript">' . "\n" . '<!--//--><![CDATA[//><!--' . "\n";
    if (!module_exists('advagg') || !variable_get('advagg_enabled', ADVAGG_ENABLED) || (isset($_GET['advagg']) && $_GET['advagg'] == -1)) {
       $out .= LABJS_QUEUE . "\n\$LAB.setGlobalDefaults({AlwaysPreserveOrder:true});\n";
    }
    $out .= "\$LAB.queue(" . implode(");\n\$LAB.queue(", $scripts) . ");\n//--><!]]>\n</script>\n";
  }
  $variables['scripts'] .=  $out . $javascript;

  // Add triger to end of closure.
  $variables['closure'] .= '<script type="text/javascript">$LAB.queue(function() {Drupal.scriptsready=true;jQuery(document).trigger(\'scripts-ready\');}).executeQueue();</script>'."\n";
}

/**
 * Rewrites <script> tag to use LABjs.
 *
 * @param $javascript
 *   String including <script> tag
 * @return
 *   Input string is modified and returned
 */
function labjs_rewrite_js(&$javascript) {
  $javascript = preg_replace_callback('#<script .+?</script>\s*#s', '_labjs_rewrite_js', $javascript);
  return $javascript;
}

/**
 * Given path output uri to that file. CDN aware.
 *
 * @param $filename_md5
 *   md5 of filename.
 * @param $data
 *   data to store.
 */
function labjs_build_uri($path) {
  // CDN Support.
  if (module_exists('cdn')) {
    $status = variable_get(CDN_STATUS_VARIABLE, CDN_DISABLED);
    if (($status == CDN_ENABLED || ($status == CDN_TESTING && user_access(CDN_PERM_ACCESS_TESTING))) && variable_get(CDN_THEME_LAYER_FALLBACK_VARIABLE, FALSE) == FALSE) {
      return file_create_url($path);
    }
  }
  return base_path() . $path;
}

/**
 * Build and theme JS output for header.
 *
 * @param $external_no_preprocess
 *   array(array($src, $defer))
 * @param $output_preprocess
 *   array(array($src, $prefix, $suffix))
 * @param $output_no_preprocess
 *   array(array(array($src, $defer)))
 * @param $setting_no_preprocess
 *   array(array($code))
 * @param $inline_no_preprocess
 *   array(array($code, $defer))
 * @return
 *   String of themed JavaScript.
 */
function labjs_advagg_js_builder($external_no_preprocess, $output_preprocess, $output_no_preprocess, $setting_no_preprocess, $inline_no_preprocess) {
  // For inline Javascript to validate as XHTML, all Javascript containing
  // XHTML needs to be wrapped in CDATA. To make that backwards compatible
  // with HTML 4, we need to comment out the CDATA-tag.
  $embed_prefix = "\n<!--//--><![CDATA[//><!--\n\$LAB.queue(function() {";
  $embed_suffix = "});\n//--><!]]>\n";

  // Keep the order of JS files consistent as some are preprocessed and others are not.
  // Make sure any inline or JS setting variables appear last after libraries have loaded.
  $scripts = array();
  if (!empty($external_no_preprocess)) {
    foreach ($external_no_preprocess as $values) {
      list ($src, $defer) = $values;
      $scripts[] = '"' . $src . '"';
    }
  }

  if (!empty($output_preprocess)) {
    foreach ($output_preprocess as $values) {
      list ($src, $prefix, $suffix) = $values;
      $scripts[] = '"' . $src . '"';
    }
  }

  foreach ($output_no_preprocess as $type => $list) {
    if (!empty($list)) {
      foreach ($list as $values) {
        list ($src, $defer) = $values;
        $scripts[] = '"' . $src . '"';
      }
    }
  }

  $labjs_path = (module_exists('libraries') ? libraries_get_path('labjs') : 'sites/all/libraries/labjs') . '/LAB.min.js';

  // LABjs scripts
  $output = '<script type="text/javascript" src="' . labjs_build_uri($labjs_path) . '"></script>' . "\n";
  $output .= '<script type="text/javascript">' . "\n";
  $output .= '<!--//--><![CDATA[//><!--' . "\n";
  $output .= LABJS_QUEUE . "\n";
  $output .= "\$LAB.setGlobalDefaults({AlwaysPreserveOrder:true});\n";
  if (!empty($scripts)) {
    $output .= "\$LAB.queue(" . implode(");\n\$LAB.queue(", $scripts) . "); \n";
  }
  $output .= "//--><!]]>\n";
  $output .= "</script>\n";

  if (!empty($setting_no_preprocess)) {
    foreach ($setting_no_preprocess as $code) {
      $output .= '<script type="text/javascript">' . $embed_prefix . $code . $embed_suffix . "</script>\n";
    }
  }

  if (!empty($inline_no_preprocess)) {
    foreach ($inline_no_preprocess as $values) {
      list ($code, $defer) = $values;
      $output .= '<script type="text/javascript"'. ($defer ? ' defer="defer"' : '') .'>' . $embed_prefix . $code . $embed_suffix . "</script>\n";
    }
  }

  return $output;
}

/**
 * Replace core JavaScripts with LABjs-aware version.
 *
 * @param $javascript
 *   associative array from drupal_add_js()
 * @return
 *   Nothing. Input array is modified.
 */
function _labjs_patch_core(&$javascript) {
  if (isset($javascript['core']['misc/drupal.js'])) {
    // Replace drupal.js with our patched version
    $keys = array_keys($javascript['core']);
    $values = array_values($javascript['core']);
    $position = array_search('misc/drupal.js', array_keys($javascript['core']));
    $keys[$position] = drupal_get_path('module', 'labjs') .'/drupal.modified.js';
    $javascript['core'] = array_combine($keys, $values);// PHP5
  }
}

/**
 * Callback function for labjs_rewrite_js().
 *
 * When called without parameter, returns an array containing all processed scripts.
 */
function _labjs_rewrite_js($matches = NULL) {
  // We store all processed scripts in the $scripts array.
  static $scripts = array();
  if (!$matches) {
    return $scripts;
  }
  else {
    $exception = (strpos($matches[0], 'rpxnow.com') !== FALSE);

    // If this is an inline script, we remove and add the src to $scripts array.
    // If not, we try to wrap it with $LAB.wait()
    if (preg_match('#type="text/javascript" (defer="defer" |)src="(.+?)"#', $matches[0], $match)) {
      $scripts[] = "\"{$match[2]}\"";
      return '';
    }
    else {
      return (strpos($matches[0], LABJS_EXCLUDE) !== FALSE || $exception) ? $matches[0] : str_replace(
        array("<!--//--><![CDATA[//><!--", "//--><!]]>"),
        array("<!--//--><![CDATA[//><!--\n\$LAB.queue(function() {", "});\n//--><!]]>"),
        $matches[0]);
    }
  }
}
