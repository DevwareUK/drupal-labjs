<?php
// $Id$

/**
 * Implements hook_init().
 */
function labjs_init() {
  // Loads our loader first
  drupal_add_js('sites/all/libraries/labjs/LAB.min.js', array('group' => JS_LIBRARY, 'weight' => -50, 'every_page' => 1, 'inline' => TRUE));
}

/**
 * Implements hook_js_alter().
 */
function labjs_js_alter(&$javascript) {
  $scripts = array();
  $files = array();
  $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  // The index counter is used to keep aggregated and non-aggregated files in
  // order by weight.
  $index = 1;

  // Sorts the scripts into correct order
  // Drupal assigns different weight for each scripts, thus we can't determine
  // if two scripts can be executed in parallel. However, they are all loaded in
  // parallel.
  uasort($javascript, 'drupal_sort_css_js');
  foreach ($javascript as $key => $item) {
    if (empty($item['inline'])) {
      if ($item['type'] == 'file' || $item['type'] == 'external') {
        if ($item['type'] == 'external' || !$item['preprocess'] || !$preprocess_js) {
          $src = $item['type'] == 'external' ? $item['data'] : file_create_url($item['data']);
          $scripts[$index++] = "\"$src\"";
        }
        else {
          $filekey = 'aggregate_' . $item['group'] . '_' . $item['every_page'] . '_' . $index;
          $files[$filekey][$item['data']] = $item;
        }
        unset($javascript[$key]);
      }
    }
  }

  // Aggregates any remaining JS files
  if ($preprocess_js && count($files) > 0) {
    foreach ($files as $key => $file_set) {
      $uri = drupal_build_js_cache($file_set);
      // Only include the file if was written successfully. Errors are logged
      // using watchdog.
      if ($uri) {
        $scripts[$key] = "\"" . file_create_url($uri) . "\"";
      }
    }
  }

  // Adds the JS function call
  $javascript['labjs'] = array(
    'scope' => 'header',
    'type' => 'inline',
    'data' => "var _lab = \$LAB\n.setOptions({AlwaysPreserveOrder:true})\n.script(" . implode(")\n.script(", $scripts) . ");",
    'defer' => FALSE,
    'group' => 1,
  );
}

/**
 * Implements hook_preprocess_html_tag().
 *
 * Inline JavaScript blocks must be executed in order. In the blocking script load,
 * this is the default behavior. With LAB, we must wrap them in wait() to preserve
 * this behavior
 */
function labjs_preprocess_html_tag(&$variables) {
  if ($variables['element']['#tag'] == 'script' && !empty($variables['element']['#value']) && substr($variables['element']['#value'], 0, 11) !== 'var _lab = ') {
    $variables['element']['#value'] = "_lab.wait(function() {\n" . $variables['element']['#value'] . "\n});";
  }
}
