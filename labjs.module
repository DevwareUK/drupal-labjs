<?php
// $Id$

/**
 * @file
 *   LABjs module
 */

define('LABJS_EXCLUDE', '// LABjs exclusion');
define('LABJS_QUEUE', '$LAB._q=[];$LAB.queue=function(){Array.prototype.push.apply($LAB._q,arguments);return this};$LAB.executeQueue=function(){var a=$LAB;for(var i=0,l=$LAB._q.length;i<l;i++){if(typeof $LAB._q[0]=="string"){a=a.script($LAB._q[0])}else if($LAB._q[0]===false){a=a.wait()}else{a=a.wait($LAB._q[0])}$LAB._q.shift()}$LAB._q=[]};');

/**
 * Implementation of hook_menu().
 */
function labjs_menu() {
  $items = array();

  $items['admin/settings/performance/labjs'] = array(
    'title' => 'LABjs',
    'description' => 'Configure the settings used to wrap JS blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('labjs_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Form for configuring the module.
 */
function labjs_admin_settings_form() {
  $form = array();

  $form['basic'] = array(
    '#type' => 'fieldset',
    '#title' => t('Basic settings'),
  );
  $form['basic']['labjs_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable LABjs loader'),
    '#default_value' => variable_get('labjs_enabled', TRUE),    
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
  );
  $form['advanced']['labjs_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rewrite JavaScript blocks in page content'),
    '#default_value' => variable_get('labjs_content', FALSE),    
  );
  $form['advanced']['labjs_closure'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rewrite JavaScript blocks in page closure'),
    '#default_value' => variable_get('labjs_enabled', FALSE),    
  );

  return system_settings_form($form);
}

/**
 * Implements hook_preprocess_page().
 */
function labjs_preprocess_page(&$variables) {
  if (! variable_get('labjs_enabled', TRUE)) {
    return;
  }

  $javascript = preg_replace_callback('#<script .+?</script>#s', '_labjs_rewrite_js', $variables['scripts']);
  if (variable_get('labjs_content', FALSE)) {
    $variables['content'] = preg_replace_callback('#<script .+?</script>#s', '_labjs_rewrite_js', $variables['content']);
  }
  if (variable_get('labjs_closure', FALSE)) {
    $variables['closure'] = preg_replace_callback('#<script .+?</script>#s', '_labjs_rewrite_js', $variables['closure']);
  }

  $scripts = _labjs_rewrite_js();

  $labjs_path = (module_exists('libraries') ? libraries_get_path('labjs') : 'sites/all/libraries/labjs') . '/LAB.min.js';
  $variables['scripts'] = '<script type="text/javascript" src="' . base_path() . $labjs_path . '"></script>' .
    '<script type="text/javascript">' . "\n" . LABJS_QUEUE . "\n\$LAB.setGlobalDefaults({AlwaysPreserveOrder:true});\n\$LAB.queue(" . implode(");\n\$LAB.queue(", $scripts) . ");\n</script>" .
    $javascript;
  $variables['closure'] .= '<script type="text/javascript">$LAB.executeQueue();</script>';
}

/**
 * Rewrites all <script> tag to use LABjs.
 */
function _labjs_rewrite_js($matches = NULL) {
  // We store all parsed scripts in the $scripts array.
  // When call without parameter, we return this array.
  static $scripts = array();
  if (! $matches) {
    return $scripts;
  }
  else {
    // If this is an inline script, we remove and add the src to $scripts array.
    // If not, we try to wrap it with $LAB.wait()
    if (preg_match('#type="text/javascript" src="(.+?)"#', $matches[0], $match)) {
      $scripts[] = "\"{$match[1]}\"";
      return '';
    }
    else {
      return (strpos($matches[0], LABJS_EXCLUDE) !== FALSE) ? $matches[0] : str_replace(
        array("<!--//--><![CDATA[//><!--", "//--><!]]>"), 
        array("<!--//--><![CDATA[//><!--\n\$LAB.queue(function() {", "});\n//--><!]]>"),
        $matches[0]);
    }
  }
}