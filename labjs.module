<?php

/**
 * @file
 *   LABjs module
 */

define('LABJS_EXCLUDE', '// LABjs exclusion');

// If we are in maintenance mode, hook_init() is not called.
// We don't want to do anything else, either.
if (defined('MAINTENANCE_MODE')) {
  define('LABJS_DISABLE', TRUE);
}

/**
 * Implements hook_init().
 */
function labjs_init() {
  // Loads our loader first
  // Normally we use JS_LIBRARY, but Google Analytics module uses JS_LIBRARY-1,
  // then we use JS_LIBRARY-10. We should look for a more proper approach.
  drupal_add_js(labjs_get_path(), array('group' => JS_LIBRARY-10, 'weight' => -50, 'every_page' => 1, 'inline' => TRUE, 'preprocess' => FALSE));
}

/**
 * Implements hook_js_alter().
 */
function labjs_js_alter(&$javascript) {
  if (defined('LABJS_DISABLE')) {
    return;
  }

  $scripts = array();
  $files = array();
  $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  // The index counter is used to keep aggregated and non-aggregated files in
  // order by weight.
  $index = 1;

  // Sorts the scripts into correct order
  // Drupal assigns different weight for each scripts, thus we can't determine
  // if two scripts can be executed in parallel. However, they are all loaded in
  // parallel.
  uasort($javascript, 'drupal_sort_css_js');

  // Replaces the original misc/drupal.js with a new one, without using
  // $(document).ready(...);
  $javascript['misc/drupal.js']['data'] = drupal_get_path('module', 'labjs') . '/replace/drupal.js';

  // Overlay thinks that DOM is ready when it is loaded.
  // With LABjs enabled, it is no longer correct. We need to patch it, too.
  if (isset($javascript['modules/overlay/overlay-parent.js'])) {
    $javascript['modules/overlay/overlay-parent.js']['data'] = drupal_get_path('module', 'labjs') . '/replace/overlay-parent.js';
  }

  // Provide the page with information about the individual JavaScript files
  // used, information not otherwise available when aggregation is enabled.
  $setting['ajaxPageState']['js'] = array_fill_keys(array_keys($javascript), 1);
  unset($setting['ajaxPageState']['js']['settings']);
  drupal_add_js($setting, 'setting');

  foreach ($javascript as $key => $item) {
    if (empty($item['inline'])) {
      if (!isset($item['type']) || $item['type'] == 'file' || $item['type'] == 'external') {
        if ($item['type'] == 'external' || !$item['preprocess'] || !$preprocess_js) {
          $src = $item['type'] == 'external' ? $item['data'] : file_create_url($item['data']);
          $scripts[$item['scope']][$index++] = $src;
        }
        else {
          $filekey = 'aggregate_' . $item['group'] . '_' . $item['every_page'] . '_' . $index;
          $scripts[$item['scope']][$filekey] = '';
          $files[$item['scope']][$filekey][$item['data']] = $item;
        }
        unset($javascript[$key]);
      }
    }
    elseif ($item['type'] == 'inline') {
      $javascript[$key]['data'] = LABJS_EXCLUDE . "\n" . $javascript[$key]['data'];
    }
  }

  // Aggregates any remaining JS files
  if ($preprocess_js && count($files) > 0) {
    foreach ($files as $scope => $items) {
      foreach ($items as $key => $file_set) {
        $uri = drupal_build_js_cache($file_set);
        // Only include the file if was written successfully. Errors are logged
        // using watchdog.
        if ($uri) {
          $scripts[$scope][$key] = file_create_url($uri);
        }
      }
    }
  }

  // Adds the JS function call
  $base = array(
    'defer' => FALSE,
    'type' => 'inline',
    'group' => JS_LIBRARY,
    'every_page' => 1,
  );
  $javascript['labjs--init'] = $base + array(
    'scope' => 'header',
    'data' => LABJS_EXCLUDE . "\nvar \$L = \$LAB.setGlobalDefaults({AlwaysPreserveOrder:true});",
    'weight' => -20,
  );
  $javascript['labjs--execute'] = $base + array(
    'scope' => 'footer',
    'data' => LABJS_EXCLUDE . "\n\$L = \$L.wait(function() {Drupal.scriptsready=true;jQuery(document).trigger('scripts-ready');});",
    'weight' => 20,
  );
  foreach ($scripts as $scope => $items) {
    $data = array();
    foreach ($items as $item) {
      $data[] = '$L = $L.script("' . $item . '");';
    }
    $javascript['labjs-' . $scope] = $base + array(
      'scope' => $scope,
      'data' => LABJS_EXCLUDE . "\n" . implode("\n", $data),
      'weight' => 10,
    );
  }
}

/**
 * Implements hook_preprocess_html_tag().
 *
 * Inline JavaScript blocks must be executed in order. In the blocking script load,
 * this is the default behavior. With LAB, we must wrap them in wait() to preserve
 * this behavior
 */
function labjs_preprocess_html_tag(&$variables) {
  if (defined('LABJS_DISABLE')) {
    return;
  }

  if ($variables['element']['#tag'] == 'script' && !empty($variables['element']['#value']) && strpos($variables['element']['#value'], LABJS_EXCLUDE) !== 0) {
    // Some JavaScripts do not support LABjs
    if (strpos($variables['element']['#value'], 'rpxnow.com') !== FALSE || strpos($variables['element']['#value'], 'fbcdn.net') !== FALSE) {
      return;
    }

    // Google Analytics compatibility
    $variables['element']['#value'] = str_replace('var _gaq = _gaq || [];', 'if (typeof(_gaq)=="undefined") _gaq=[];', $variables['element']['#value']);
    $variables['element']['#value'] = "\$L = \$L.wait(function() {\n" . $variables['element']['#value'] . "\n});";
  }
}

/**
 * Helper for search for LAB.min.js file.
 *
 * If our system does not have libraries module, that file must reside at
 * sites/all/libraries/labjs/LAB.min.js.
 * If Libraries API is available, there are more choices.
 */
function labjs_get_path() {
  return drupal_get_path('module', 'labjs') . '/labjs.min.js';
}
